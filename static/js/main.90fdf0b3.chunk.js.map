{"version":3,"sources":["components/selectable-card/index.tsx","components/suit-display-card/index.tsx","card-data/index.ts","components/card-selection-grid/index.tsx","components/solution-display/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","classes","isSelected","isDisabled","suit","className","onClick","id","rank","SuitToSymbol","SuitDisplayCard","suits","counter","suitsDict","C","H","S","D","data","forEach","r","s","push","cardData","suitsData","CardSelectionGrid","React","selected","setSelected","toggleSelected","newSelected","includes","filter","i","length","Object","keys","map","key","slice","card","disabled","fetchInProgress","solve","renderSolutionRow","row","SolutionDisplay","console","log","solution","score","pyramid","top","middle","bottom","App","useState","setSolution","setFetchInProgress","fetchSolution","a","bodyData","cards","fetch","method","headers","Headers","body","JSON","stringify","response","json","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.90fdf0b3.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Suit, Rank } from \"../../types\";\n\nexport interface CardProps {\n  isSelected: boolean;\n  suit: Suit;\n  rank: Rank;\n  id: number;\n  isDisabled: boolean;\n  onClick?: (id: number) => void;\n}\n\nconst SuitToSymbol = (suit: Suit): JSX.Element => {\n  switch (suit) {\n    case \"C\":\n      return <>&#9827;</>;\n    case \"H\":\n      return <>&#9829;</>;\n    case \"S\":\n      return <>&#9824;</>;\n    case \"D\":\n      return <>&#9830;</>;\n  }\n};\n\nexport const Card = (props: CardProps) => {\n  let classes = \"card-selection-grid__card\";\n\n  classes += props.isSelected ? \" card-selection-grid__card--selected\" : \"\";\n  classes += props.isDisabled ? \" card-selection-grid__card--disabled\" : \"\";\n\n  classes +=\n    props.suit === \"H\" || props.suit === \"D\"\n      ? \" card-selection-grid__card--red\"\n      : \"\";\n\n  const handleClick = () => {\n    if (props.onClick) props.onClick(props.id);\n  };\n\n  return (\n    <div className={classes} onClick={handleClick}>\n      <div className=\"card-selection-grid__card__suit-and-rank\">\n        {props.rank}\n        {SuitToSymbol(props.suit)}\n      </div>\n      {props.isSelected && (\n        <div className=\"card-selection-grid__card__selected-marker\">\n          &#10004;\n        </div>\n      )}\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Suit } from \"../../types\";\n\nexport interface SuitDisplayCardProps {\n  suit: Suit;\n}\n\nconst SuitToSymbol = (suit: Suit): JSX.Element => {\n  switch (suit) {\n    case \"C\":\n      return <>&#9827;</>;\n    case \"H\":\n      return <>&#9829;</>;\n    case \"S\":\n      return <>&#9824;</>;\n    case \"D\":\n      return <>&#9830;</>;\n  }\n};\nexport const SuitDisplayCard = (props: SuitDisplayCardProps) => {\n  let classes = \"suit-display-card\";\n  classes +=\n    props.suit === \"H\" || props.suit === \"D\" ? \" suit-display-card--red\" : \"\";\n  return <div className={classes}>{SuitToSymbol(props.suit)}</div>;\n};\n","import { Suit, Rank, ProcessedCardData } from \"../types\";\n\nexport interface CardData {\n  [key: number]: { suit: Suit; rank: Rank };\n}\n\nconst suits: Suit[] = [\"C\", \"D\", \"H\", \"S\"];\nconst ranks: Rank[] = [\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"10\",\n  \"J\",\n  \"Q\",\n  \"K\",\n  \"A\",\n];\n\nlet counter = 0;\n\nconst suitsDict: { [k: string]: ProcessedCardData[] } = {\n  C: [],\n  H: [],\n  S: [],\n  D: [],\n};\n\nconst data: CardData = {};\nranks.forEach((r) =>\n  suits.forEach((s) => {\n    data[counter] = { suit: s, rank: r };\n\n    suitsDict[s].push({ id: counter, rank: r });\n    counter++;\n  })\n);\n\nexport const cardData = data; // data format suitable for quick lookup from response\nexport const suitsData = suitsDict; // data format suitable for producing UI\n","import * as React from \"react\";\nimport { Card } from \"../selectable-card\";\nimport { SuitDisplayCard } from \"../suit-display-card\";\nimport { suitsData } from \"../../card-data\";\nimport { Suit, ProcessedCardData } from \"../../types\";\n\nexport interface CardSelectionGridProps {\n  solve: (selection: number[]) => void;\n  fetchInProgress: boolean;\n}\n// const s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\nexport const CardSelectionGrid = (props: CardSelectionGridProps) => {\n  const [selected, setSelected] = React.useState<number[]>([]);\n\n  const toggleSelected = (id: number) => {\n    const isAlreadySelected = selected.includes(id);\n    let newSelected: number[];\n    if (isAlreadySelected) {\n      newSelected = selected.filter((i) => i !== id);\n\n      setSelected(newSelected);\n    } else if (selected.length < 13) {\n      newSelected = [...selected, id];\n      setSelected(newSelected);\n    }\n  };\n\n  const clearSelection = () => {\n    setSelected([]);\n  };\n\n  const solveSolution = () => {\n    props.solve(selected);\n  };\n\n  return (\n    <>\n      <div className=\"card-selection-grid\">\n        {Object.keys(suitsData).map((key) => {\n          return (\n            <div key={key} className={`card-selecton-grid__suit`}>\n              <div>\n                <SuitDisplayCard suit={key as Suit} />\n                {suitsData[key].slice(0, 6).map((card: ProcessedCardData) => (\n                  <Card\n                    key={card.id}\n                    suit={key as Suit}\n                    id={card.id}\n                    rank={card.rank}\n                    isSelected={selected.includes(card.id)}\n                    isDisabled={\n                      !selected.includes(card.id) && selected.length === 13\n                    }\n                    onClick={toggleSelected}\n                  />\n                ))}\n              </div>\n              <div>\n                {suitsData[key].slice(6, 13).map((card: ProcessedCardData) => (\n                  <Card\n                    key={card.id}\n                    id={card.id}\n                    suit={key as Suit}\n                    rank={card.rank}\n                    isSelected={selected.includes(card.id)}\n                    isDisabled={\n                      !selected.includes(card.id) && selected.length === 13\n                    }\n                    onClick={toggleSelected}\n                  />\n                ))}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"control-panel\">\n        <button\n          disabled={selected.length === 0 || props.fetchInProgress}\n          onClick={clearSelection}\n        >\n          Clear\n        </button>\n        <button\n          disabled={selected.length !== 13 || props.fetchInProgress}\n          onClick={solveSolution}\n        >\n          {props.fetchInProgress ? \"Solving...\" : \"Solve\"}\n        </button>\n      </div>\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { Solution } from \"../../types\";\nimport { Card } from \"../selectable-card\";\nimport { cardData } from \"../../card-data\";\n\nexport interface SolutionDisplayProps {\n  solution: Solution;\n}\n\nconst renderSolutionRow = (row: number[]) => {\n  return row.map((id) => {\n    const card = cardData[id];\n    return (\n      <Card\n        key={id}\n        suit={card.suit}\n        id={id}\n        rank={card.rank}\n        isSelected={false}\n        isDisabled={false}\n      />\n    );\n  });\n};\nexport const SolutionDisplay = (props: SolutionDisplayProps) => {\n  console.log(props.solution);\n  return (\n    <div className=\"solution-display\">\n      <div className=\"solution-display__score\">\n        Score: {props.solution.score}\n      </div>\n      <div className=\"solution-display__pyramid\">\n        <div>{renderSolutionRow(props.solution.pyramid.top)}</div>\n        <div>{renderSolutionRow(props.solution.pyramid.middle)}</div>\n        <div>{renderSolutionRow(props.solution.pyramid.bottom)}</div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./styles/main.scss\";\nimport { CardSelectionGrid } from \"./components/card-selection-grid\";\nimport { Solution } from \"./types\";\nimport { SolutionDisplay } from \"./components/solution-display\";\n\n// const mockSolution: Solution = {\n//   pyramid: {\n//     bottom: [1, 3, 5, 8],\n//     middle: [12, 15, 16, 18, 4],\n//     top: [32, 35, 37],\n//   },\n//   score: 12,\n// };\n\nfunction App() {\n  const [solution, setSolution] = React.useState<Solution | null>();\n  const [fetchInProgress, setFetchInProgress] = React.useState<boolean>(false);\n  const fetchSolution = async (selected: number[]) => {\n    const bodyData = {\n      cards: selected,\n    };\n\n    try {\n      setFetchInProgress(true);\n      const response = await fetch(\"https://fantasysolver.herokuapp.com/\", {\n        method: \"POST\",\n        headers: new Headers({ \"content-type\": \"application/json\" }),\n        body: JSON.stringify(bodyData),\n      });\n\n      console.log(response);\n      const solution = await response.json();\n      console.log(solution);\n      setSolution(solution);\n      setFetchInProgress(false);\n    } catch (e) {\n      console.error(e);\n      setFetchInProgress(false);\n    }\n  };\n  return (\n    <div className=\"app-container\">\n      <CardSelectionGrid\n        solve={fetchSolution}\n        fetchInProgress={fetchInProgress}\n      />\n      {solution && <SolutionDisplay solution={solution} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}