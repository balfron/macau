{"version":3,"sources":["components/selectable-card/index.tsx","components/suit-display-card/index.tsx","card-data/index.ts","components/card-selection-grid/index.tsx","utils/process-card-data.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","classes","isSelected","isDisabled","className","onClick","id","rank","suit","SuitToSymbol","SuitDisplayCard","ranks","counter","data","forEach","s","r","suits","C","H","S","D","Object","keys","card","parseInt","push","processCardData","CardSelectionGrid","React","selected","setSelected","toggleSelected","newSelected","includes","filter","i","length","map","key","slice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20858c93.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Suit, Rank } from \"../../types\";\n\nexport interface CardProps {\n  isSelected: boolean;\n  suit: Suit;\n  rank: Rank;\n  id: number;\n  isDisabled: boolean;\n  onClick: (id: number) => void;\n}\n\nconst SuitToSymbol = (suit: Suit): JSX.Element => {\n  switch (suit) {\n    case \"C\":\n      return <>&#9827;</>;\n    case \"H\":\n      return <>&#9829;</>;\n    case \"S\":\n      return <>&#9824;</>;\n    case \"D\":\n      return <>&#9830;</>;\n  }\n};\n\nexport const Card = (props: CardProps) => {\n  let classes = \"card-selection-grid__card\";\n\n  classes += props.isSelected ? \" card-selection-grid__card--selected\" : \"\";\n  classes += props.isDisabled ? \" card-selection-grid__card--disabled\" : \"\";\n\n  const handleClick = () => {\n    props.onClick(props.id);\n  };\n\n  return (\n    <div className={classes} onClick={handleClick}>\n      <div className=\"card-selection-grid__card__suit-and-rank\">\n        {props.rank}\n        {SuitToSymbol(props.suit)}\n      </div>\n      {props.isSelected && (\n        <div className=\"card-selection-grid__card__selected-marker\">\n          &#10004;\n        </div>\n      )}\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Suit } from \"../../types\";\n\nexport interface SuitDisplayCardProps {\n  suit: Suit;\n}\n\nconst SuitToSymbol = (suit: Suit): JSX.Element => {\n  switch (suit) {\n    case \"C\":\n      return <>&#9827;</>;\n    case \"H\":\n      return <>&#9829;</>;\n    case \"S\":\n      return <>&#9824;</>;\n    case \"D\":\n      return <>&#9830;</>;\n  }\n};\nexport const SuitDisplayCard = (props: SuitDisplayCardProps) => {\n  return <div className=\"suit-display-card\">{SuitToSymbol(props.suit)}</div>;\n};\n","import { Suit, Rank } from \"../types\";\n\nexport interface CardData {\n  [key: number]: { suit: Suit; rank: Rank };\n}\n\nconst suits: Suit[] = [\"C\", \"D\", \"H\", \"S\"];\nconst ranks: Rank[] = [\n  \"A\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"10\",\n  \"J\",\n  \"Q\",\n  \"K\",\n];\n\nlet counter = 0;\n\nconst data: CardData = {};\nsuits.forEach((s) =>\n  ranks.forEach((r) => {\n    data[counter] = { suit: s, rank: r };\n    counter++;\n  })\n);\nexport const cardData = data;\n","import * as React from \"react\";\nimport { Card } from \"../selectable-card\";\nimport { SuitDisplayCard } from \"../suit-display-card\";\nimport { cardData } from \"../../card-data\";\nimport { Suit, ProcessedCardData } from \"../../types\";\nimport { processCardData } from \"../../utils/process-card-data\";\n\nconst suits = processCardData(cardData);\n\nexport const CardSelectionGrid = () => {\n  const [selected, setSelected] = React.useState<number[]>([]);\n\n  const toggleSelected = (id: number) => {\n    const isAlreadySelected = selected.includes(id);\n    let newSelected: number[];\n    if (isAlreadySelected) {\n      newSelected = selected.filter((i) => i !== id);\n\n      setSelected(newSelected);\n    } else if (selected.length < 13) {\n      newSelected = [...selected, id];\n      setSelected(newSelected);\n    }\n  };\n\n  return (\n    <div className=\"card-selection-grid\">\n      {Object.keys(suits).map((key) => {\n        return (\n          <div\n            key={key}\n            className={`card-selecton-grid__suit ${\n              key === \"H\" || key === \"D\" ? \"card-selecton-grid__suit--red\" : \"\"\n            }`}\n          >\n            <div>\n              <SuitDisplayCard suit={key as Suit} />\n              {suits[key].slice(0, 6).map((card: ProcessedCardData) => (\n                <Card\n                  key={card.id}\n                  suit={key as Suit}\n                  id={card.id}\n                  rank={card.rank}\n                  isSelected={selected.includes(card.id)}\n                  isDisabled={\n                    !selected.includes(card.id) && selected.length === 13\n                  }\n                  onClick={toggleSelected}\n                />\n              ))}\n            </div>\n            <div>\n              {suits[key].slice(6, 13).map((card: ProcessedCardData) => (\n                <Card\n                  key={card.id}\n                  id={card.id}\n                  suit={key as Suit}\n                  rank={card.rank}\n                  isSelected={selected.includes(card.id)}\n                  isDisabled={\n                    !selected.includes(card.id) && selected.length === 13\n                  }\n                  onClick={toggleSelected}\n                />\n              ))}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import { CardData } from \"../card-data\";\nimport { ProcessedCardData } from \"../types\";\n\nexport const processCardData = (data: CardData) => {\n  const suits: { [k: string]: ProcessedCardData[] } = {\n    C: [],\n    H: [],\n    S: [],\n    D: [],\n  };\n  Object.keys(data).forEach((id) => {\n    const card = data[parseInt(id)];\n    suits[card.suit].push({ id: parseInt(id), rank: card.rank });\n  });\n\n  return suits;\n};\n","import React from \"react\";\nimport \"./styles/main.scss\";\nimport { CardSelectionGrid } from \"./components/card-selection-grid\";\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <CardSelectionGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}